@page "/logout"
@using Microsoft.AspNetCore.Authorization
@using LCPCollection.Shared.Classes.Auth
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json
@using lcpCl = LCPCollection.Shared.Classes
@inject HttpClient httpClient
@inject NavigationManager navManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ILogger<Auth> Logger
@attribute [Authorize("Administrator,Moderator,User")]

<PageTitle>LCPCollection - Logout</PageTitle>

<h1><MudIcon Icon="@Icons.Material.Filled.Login" Color="Color.Inherit"></MudIcon> Logout</h1>

<div class="row">
    <div class="col-12 frmblk">
        @if(usersSessionInfo != null)
        {
            <div class="blkloggedin">
                <p>Hello, @usersSessionInfo.Username!</p>
                <MudButton ButtonType="ButtonType.Button" Color="Color.Primary" Variant="Variant.Filled" Class="d-block mt-3" OnClick="AuthLogout">Logout</MudButton>
            </div>
        }
        else
        {
            <div class="blkwarn">
                <MudIcon Icon="@Icons.Material.Filled.Login" Color="Color.Inherit" />
                <p>You don´t have permissions to see this page!</p>
            </div>
        }
    </div>
</div>

@code {
    private lcpCl.Users usersData { get; set; } = new lcpCl.Users();
    private lcpCl.Users? usersSessionInfo { get; set; } = new lcpCl.Users();
    private HttpResponseMessage? DataUsers { get; set; }
    private string? responseBody { get; set; }
    private bool forceReload { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        usersSessionInfo = await localStorage.GetItemAsync<lcpCl.Users>("loginInfo");
        StateHasChanged();
    }

    private async Task AuthLogout()
    {
        usersData = new lcpCl.Users();
        await localStorage.RemoveItemAsync("loginInfo");
        navManager.NavigateTo("/", forceReload);
    }
}
