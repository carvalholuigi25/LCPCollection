@page "/softwares/create"

@using LCPCollection.Shared.Classes
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json
@using lcpCl = LCPCollection.Shared.Classes
@inject ILogger _logger
@inject NavigationManager navMan
@inject HttpClient httpClient

<PageTitle>LCPCollection - Create Softwares</PageTitle>

<h3><MudIcon Icon="@Icons.Material.Filled.Apps" Color="Color.Inherit"></MudIcon> Create Softwares</h3>

<MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="ToggleJSON">Toggle JSON</MudButton>

@if(!!IsToggledJSON)
{
    <div class="form-group mt-3">
        <label for="mydata">Data</label>
        <textarea @bind="@SoftwaresXJTXT" class="mydata form-control" cols="1" rows="20" placeholder="@Newtonsoft.Json.JsonConvert.SerializeObject(new lcpCl.Softwares(), Newtonsoft.Json.Formatting.Indented)"></textarea>
    </div>

    <div class="form-group mt-3">
        <MudButton ButtonType="ButtonType.Button" Color="Color.Secondary" Variant="Variant.Filled" Class="btnback" OnClick="Back">Back</MudButton>
        <MudButton ButtonType="ButtonType.Button" Color="Color.Primary" Variant="Variant.Filled" Class="btnsub" OnClick="CreateIt">Submit</MudButton>
    </div>
}
else
{
    <EditForm Model="SoftwaresX" OnValidSubmit="CreateIt">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mt-3">
            <MudTextField Label="Title" @bind-Value="SoftwaresX!.Title" For="@(() => SoftwaresX!.Title)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField Label="Type" @bind-Value="SoftwaresX!.Type" For="@(() => SoftwaresX!.Type)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField AutoGrow="true" Lines="10" MaxLines="10" Label="Description" @bind-Value="SoftwaresX!.Description" For="@(() => SoftwaresX!.Description)"/>
        </div>
        
        <div class="form-group mt-3">
            <MudTextField Label="Companies" @bind-Value="SoftwaresX!.Companies" For="@(() => SoftwaresX!.Companies)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField Label="Image URL" @bind-Value="SoftwaresX!.ImageUrl" For="@(() => SoftwaresX!.ImageUrl)"/>
        </div>

        <div class="form-group mt-3">
            <MudNumericField Label="Version" @bind-Value="SoftwaresX!.Version" For="@(() => SoftwaresX!.Version)" />
        </div>

        <div class="form-group mt-3">
            <MudTextField AutoGrow="true" Lines="10" MaxLines="10" Label="Requirements" @bind-Value="SoftwaresX!.Requirements" For="@(() => SoftwaresX!.Requirements)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField Label="Platforms" @bind-Value="SoftwaresX!.Platforms" For="@(() => SoftwaresX!.Platforms)"/>
        </div>
        
        <div class="form-group mt-3">
            <MudNumericField Label="Rating" @bind-Value="SoftwaresX!.Rating" For="@(() => SoftwaresX!.Rating)" Min="0" Max="10" />
        </div>

        <div class="form-group mt-3">
            <MudTextField T="DateTime?" Format="s" InputType="InputType.DateTimeLocal" Label="Date Created" @bind-Value="SoftwaresX!.DateCreated" For="@(() => SoftwaresX!.DateCreated)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField Label="AuthorName" @bind-Value="SoftwaresX!.AuthorName" For="@(() => SoftwaresX!.AuthorName)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField Label="Url" @bind-Value="SoftwaresX!.UrlValue" For="@(() => SoftwaresX!.UrlValue)"/>
        </div>

        <div class="form-group mt-3">
            <MudButton ButtonType="ButtonType.Button" Color="Color.Tertiary" Variant="Variant.Filled" Class="btnback" OnClick="Back">Back</MudButton>
            <MudButton ButtonType="ButtonType.Reset" Color="Color.Secondary" Variant="Variant.Filled" Class="btnres">Reset</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Class="btnsub">Submit</MudButton>
        </div>
    </EditForm>
}

@code {
    private string? SoftwaresXJTXT { get; set; }
    private bool IsToggledJSON { get; set; } = false;
    lcpCl.Softwares? SoftwaresX { get; set; } = new lcpCl.Softwares();

    async Task CreateIt()
    {
        try
        {
            if(!!IsToggledJSON)
            {
                await httpClient.PostAsJsonAsync<lcpCl.Softwares>($"https://localhost:5000/api/softwares", Newtonsoft.Json.JsonConvert.DeserializeObject<lcpCl.Softwares>(SoftwaresXJTXT!)!);
            }
            else
            {
                Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(SoftwaresX));
                await httpClient.PostAsJsonAsync<lcpCl.Softwares>($"https://localhost:5000/api/softwares", SoftwaresX!);
            }

            _logger.LogInformation("Added new software succesfully!");
            navMan.NavigateTo("/softwares", false);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, ex.Message);
        }
    }

    void Back()
    {
        navMan.NavigateTo("/softwares", false);
    }

    void ToggleJSON()
    {
        IsToggledJSON = !IsToggledJSON;
    }
}
