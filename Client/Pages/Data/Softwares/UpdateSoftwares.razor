@page "/softwares/update/{id:int}"

@using LCPCollection.Shared.Classes
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http.Json
@using lcpCl = LCPCollection.Shared.Classes
@inject ILogger<Softwares> _logger
@inject NavigationManager navMan
@inject HttpClient httpClient

<PageTitle>LCPCollection - Update Softwares</PageTitle>

<h3><MudIcon Icon="@Icons.Material.Filled.Apps" Color="Color.Inherit"></MudIcon> Update Softwares</h3>

@if (cid != -1)
{
    @if(SoftwaresXList != null)
    {
        <EditForm Model="SoftwaresXList" OnValidSubmit="UpdateIt">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @foreach(var modelx in SoftwaresXList!)
            {
                <div class="form-group mt-3">
                    <MudTextField Label="Title" @bind-Value="modelx.Title" For="@(() => modelx.Title)"/>
                </div>

                <div class="form-group mt-3">
                    <MudTextField AutoGrow="true" Lines="10" MaxLines="10" Label="Description" @bind-Value="modelx.Description" For="@(() => modelx.Description)"/>
                </div>
                
                <div class="form-group mt-3">
                    <MudTextField Label="Companies" @bind-Value="modelx.Companies" For="@(() => modelx.Companies)"/>
                </div>

                <div class="form-group mt-3">
                    <MudTextField Label="Image URL" @bind-Value="modelx.ImageUrl" For="@(() => modelx.ImageUrl)"/>
                </div>

                <div class="form-group mt-3">
                    <MudNumericField Label="Version" @bind-Value="modelx.Version" For="@(() => modelx.Version)" />
                </div>

                <div class="form-group mt-3">
                    <MudTextField AutoGrow="true" Lines="10" MaxLines="10" Label="Description" @bind-Value="modelx.Requirements" For="@(() => modelx.Requirements)"/>
                </div>

                <div class="form-group mt-3">
                    <MudTextField Label="Platforms" @bind-Value="modelx.Platforms" For="@(() => modelx.Platforms)"/>
                </div>

                <div class="form-group mt-3">
                    <MudNumericField Label="Rating" @bind-Value="modelx.Rating" For="@(() => modelx.Rating)" Min="0" Max="10" />
                </div>

                <div class="form-group mt-3">
                    <MudTextField T="DateTime?" Format="s" InputType="InputType.DateTimeLocal" Label="Date Created" @bind-Value="modelx.DateCreated" For="@(() => modelx.DateCreated)"/>
                </div>

                <div class="form-group mt-3">
                    <MudTextField Label="AuthorName" @bind-Value="modelx.AuthorName" For="@(() => modelx.AuthorName)"/>
                </div>

                <div class="form-group mt-3">
                    <MudTextField Label="Url" @bind-Value="modelx.UrlValue" For="@(() => modelx.UrlValue)"/>
                </div>
            }

            <div class="form-group mt-3">
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Class="btnupd">Update</MudButton>
                <MudButton ButtonType="ButtonType.Button" Color="Color.Secondary" Variant="Variant.Filled" Class="btnbck" OnClick="Back">Back</MudButton>
            </div>
        </EditForm>
    } 
    else
    {
        <div class="col-12 loadblk">
            <p>Loading...</p>
        </div>
    }
}
else
{
    <div class="col-12 warnblk">
        <MudCard>
            <MudCardContent>
                <div class="text-center mx-auto">
                    <i class="bi bi-exclamation-circle-fill warnico"></i>
                    <p class="warntxt">0 softwares has been found!</p>
                </div>
            </MudCardContent>
            <MudCardActions>
                <div class="text-center mx-auto">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/softwares" Class="text-center mx-auto">Back</MudButton>
                </div>
            </MudCardActions>
        </MudCard>
    </div>
}

@code {
    [Parameter] public int id { get; set; } = -1;
    public int cid { get; set; }
    private List<lcpCl.Softwares>? SoftwaresXList = new List<lcpCl.Softwares>();

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        SoftwaresXList = await httpClient.GetFromJsonAsync<List<lcpCl.Softwares>>($"softwares/{id}");
        cid = SoftwaresXList!.Where(x => x.Id == id).Count() == 1 ? id : -1;
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navMan.ToAbsoluteUri("/datasendhub"))
            .Build();

        await hubConnection.StartAsync();
    }

    private async Task UpdateIt()
    {
        try
        {
            if (cid != -1)
            {
                await httpClient.PutAsJsonAsync<lcpCl.Softwares>($"softwares/{cid}", SoftwaresXList![0]);
                _logger.LogInformation("Updated software successfully!");
            }
            else
            {
                _logger.LogInformation("Unable to update software because it hasn't been found or does not exist!");
            }

            if (IsConnected) await SendMessage();
            navMan.NavigateTo(cid != -1 ? $"/softwares/{cid}" : "/softwares", false);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, ex.Message);
        }
    }

    Task SendMessage() => hubConnection!.SendAsync("SendMessage");

    public bool IsConnected => hubConnection!.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection!.DisposeAsync();
    }

    void Back()
    {
        navMan.NavigateTo(cid != -1 ? $"/softwares/{cid}" : "/softwares", false);
    }
}
