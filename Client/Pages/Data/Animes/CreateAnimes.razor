@page "/animes/create"

@using LCPCollection.Shared.Classes
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json
@using lcpCl = LCPCollection.Shared.Classes
@inject ILogger _logger
@inject NavigationManager navMan
@inject HttpClient httpClient

<PageTitle>LCPCollection - Create Animes</PageTitle>

<h3><MudIcon Icon="@Icons.Material.Filled.Tv" Color="Color.Inherit"></MudIcon> Create Animes</h3>

<MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="ToggleJSON">Toggle JSON</MudButton>

@if(!!IsToggledJSON)
{
    <div class="form-group mt-3">
        <label for="mydata">Data</label>
        <textarea @bind="@AnimesXJTXT" class="mydata form-control" cols="1" rows="20" placeholder="@Newtonsoft.Json.JsonConvert.SerializeObject(new lcpCl.Animes(), Newtonsoft.Json.Formatting.Indented)"></textarea>
    </div>

    <div class="form-group mt-3">
        <MudButton ButtonType="ButtonType.Button" Color="Color.Secondary" Variant="Variant.Filled" Class="btnback" OnClick="Back">Back</MudButton>
        <MudButton ButtonType="ButtonType.Button" Color="Color.Primary" Variant="Variant.Filled" Class="btnsub" OnClick="CreateIt">Submit</MudButton>
    </div>
}
else
{
    <EditForm Model="AnimesX" OnValidSubmit="CreateIt">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mt-3">
            <MudTextField Label="Title" @bind-Value="AnimesX!.Title" For="@(() => AnimesX!.Title)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField AutoGrow="true" Lines="10" MaxLines="10" Label="Description" @bind-Value="AnimesX!.Description" For="@(() => AnimesX!.Description)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField Label="Cover URL" @bind-Value="AnimesX!.CoverUrl" For="@(() => AnimesX!.CoverUrl)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField Label="Image URL" @bind-Value="AnimesX!.ImageUrl" For="@(() => AnimesX!.ImageUrl)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField Label="Companies" @bind-Value="AnimesX!.Companies" For="@(() => AnimesX!.Companies)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField Label="Publishers" @bind-Value="AnimesX!.Publishers" For="@(() => AnimesX!.Publishers)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField Label="Platforms" @bind-Value="AnimesX!.Platforms" For="@(() => AnimesX!.Platforms)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField T="DateTime?" Format="s" InputType="InputType.DateTimeLocal" Label="Release Date" @bind-Value="AnimesX!.ReleaseDate" For="@(() => AnimesX!.ReleaseDate)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField Label="Trailer URL" @bind-Value="AnimesX!.TrailerUrl" For="@(() => AnimesX!.TrailerUrl)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField Label="Genre" @bind-Value="AnimesX!.Genre" For="@(() => AnimesX!.Genre)"/>
        </div>

        <div class="form-group mt-3">
            <MudNumericField Label="Rating" @bind-Value="AnimesX!.Rating" For="@(() => AnimesX!.Rating)" Min="0" Max="10" />
        </div>

        <div class="form-group mt-3">
            <MudButton ButtonType="ButtonType.Button" Color="Color.Tertiary" Variant="Variant.Filled" Class="btnback" OnClick="Back">Back</MudButton>
            <MudButton ButtonType="ButtonType.Reset" Color="Color.Secondary" Variant="Variant.Filled" Class="btnres">Reset</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Class="btnsub">Submit</MudButton>
        </div>
    </EditForm>
}

@code {
    private string? AnimesXJTXT { get; set; }
    private bool IsToggledJSON { get; set; } = false;
    lcpCl.Animes? AnimesX { get; set; } = new lcpCl.Animes();
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()  
    {  
        hubConnection = new HubConnectionBuilder()  
            .WithUrl(navMan.ToAbsoluteUri("/datasendhub"))
            .Build();  
  
        await hubConnection.StartAsync();  
    }  

    private async Task CreateIt()
    {
        try
        {
            if(!!IsToggledJSON)
            {
                await httpClient.PostAsJsonAsync<lcpCl.Animes>($"animes", Newtonsoft.Json.JsonConvert.DeserializeObject<lcpCl.Animes>(AnimesXJTXT!)!);
            }
            else
            {
                Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(AnimesX));
                await httpClient.PostAsJsonAsync<lcpCl.Animes>($"animes", AnimesX!);
            }

            if (IsConnected) await SendMessage();
            _logger.LogInformation("Added new anime succesfully!");
            navMan.NavigateTo("/animes", false);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, ex.Message);
        }
    }

    Task SendMessage() => hubConnection!.SendAsync("SendMessage");

    public bool IsConnected =>
        hubConnection!.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection!.DisposeAsync();
    }

    void Back()
    {
        navMan.NavigateTo("/animes", false);
    }

    void ToggleJSON()
    {
        IsToggledJSON = !IsToggledJSON;
    }
}
