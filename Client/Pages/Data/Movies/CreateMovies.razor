@page "/movies/create"

@using LCPCollection.Shared.Classes
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json
@using lcpCl = LCPCollection.Shared.Classes
@inject ILogger _logger
@inject NavigationManager navMan
@inject HttpClient httpClient

<PageTitle>LCPCollection - Create Movies</PageTitle>

<h3><MudIcon Icon="@Icons.Material.Filled.Movie" Color="Color.Inherit"></MudIcon> Create Movies</h3>

<MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="ToggleJSON">Toggle JSON</MudButton>

@if(!!IsToggledJSON)
{
    <div class="form-group mt-3">
        <label for="mydata">Data</label>
        <textarea @bind="@MoviesXJTXT" class="mydata form-control" cols="1" rows="20" placeholder="@Newtonsoft.Json.JsonConvert.SerializeObject(new lcpCl.Movies(), Newtonsoft.Json.Formatting.Indented)"></textarea>
    </div>

    <div class="form-group mt-3">
        <MudButton ButtonType="ButtonType.Button" Color="Color.Secondary" Variant="Variant.Filled" Class="btnback" OnClick="Back">Back</MudButton>
        <MudButton ButtonType="ButtonType.Button" Color="Color.Primary" Variant="Variant.Filled" Class="btnsub" OnClick="CreateIt">Submit</MudButton>
    </div>
}
else
{
    <EditForm Model="MoviesX" OnValidSubmit="CreateIt">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mt-3">
            <MudTextField Label="Title" @bind-Value="MoviesX!.Title" For="@(() => MoviesX!.Title)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField AutoGrow="true" Lines="10" MaxLines="10" Label="Description" @bind-Value="MoviesX!.Description" For="@(() => MoviesX!.Description)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField Label="Cover URL" @bind-Value="MoviesX!.CoverUrl" For="@(() => MoviesX!.CoverUrl)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField Label="Image URL" @bind-Value="MoviesX!.ImageUrl" For="@(() => MoviesX!.ImageUrl)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField Label="Companies" @bind-Value="MoviesX!.Companies" For="@(() => MoviesX!.Companies)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField Label="Publishers" @bind-Value="MoviesX!.Publishers" For="@(() => MoviesX!.Publishers)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField Label="Platforms" @bind-Value="MoviesX!.Platforms" For="@(() => MoviesX!.Platforms)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField T="DateTime?" Format="s" InputType="InputType.DateTimeLocal" Label="Release Date" @bind-Value="MoviesX!.ReleaseDate" For="@(() => MoviesX!.ReleaseDate)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField Label="Trailer URL" @bind-Value="MoviesX!.TrailerUrl" For="@(() => MoviesX!.TrailerUrl)"/>
        </div>

        <div class="form-group mt-3">
            <MudTextField Label="Genre" @bind-Value="MoviesX!.Genre" For="@(() => MoviesX!.Genre)"/>
        </div>

        <div class="form-group mt-3">
            <MudNumericField Label="Rating" @bind-Value="MoviesX!.Rating" For="@(() => MoviesX!.Rating)" Min="0" Max="10" />
        </div>

        <div class="form-group mt-3">
            <MudButton ButtonType="ButtonType.Button" Color="Color.Tertiary" Variant="Variant.Filled" Class="btnback" OnClick="Back">Back</MudButton>
            <MudButton ButtonType="ButtonType.Reset" Color="Color.Secondary" Variant="Variant.Filled" Class="btnres">Reset</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Class="btnsub">Submit</MudButton>
        </div>
    </EditForm>
}

@code {
    private string? MoviesXJTXT { get; set; }
    private bool IsToggledJSON { get; set; } = false;
    lcpCl.Movies? MoviesX { get; set; } = new lcpCl.Movies();
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navMan.ToAbsoluteUri("/datasendhub"))
            .Build();

        await hubConnection.StartAsync();
    }

    private async Task CreateIt()
    {
        try
        {
            if (!!IsToggledJSON)
            {
                await httpClient.PostAsJsonAsync<lcpCl.Movies>($"movies", Newtonsoft.Json.JsonConvert.DeserializeObject<lcpCl.Movies>(MoviesXJTXT!)!);
            }
            else
            {
                Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(MoviesX));
                await httpClient.PostAsJsonAsync<lcpCl.Movies>($"movies", MoviesX!);
            }

            if (IsConnected) await SendMessage();
            _logger.LogInformation("Added new movie succesfully!");
            navMan.NavigateTo("/movies", false);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, ex.Message);
        }
    }

    Task SendMessage() => hubConnection!.SendAsync("SendMessage");

    public bool IsConnected =>
        hubConnection!.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection!.DisposeAsync();
    }

    void Back()
    {
        navMan.NavigateTo("/movies", false);
    }

    void ToggleJSON()
    {
        IsToggledJSON = !IsToggledJSON;
    }
}
