@page "/admin/qryrunner"
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Headers
@using lcpCl = LCPCollection.Shared.Classes
@using LCPCollection.Shared.Classes.Admin
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient httpClient
@inject NavigationManager navManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@attribute [Authorize("Administrator")]

<PageTitle>LCPCollection - Admin - Query Runner</PageTitle>

<h1><MudIcon Icon="@Icons.Material.Filled.QueryBuilder" Color="Color.Inherit" /> Admin - Query Runner</h1>

<div class="container-fluid mt-3">
    <div class="row">
        <div class="col-12">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator/>

                <MudGrid>
                    <MudItem xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
                        <MudCard>
                            <MudCardContent>
                                <MudSelect T="string" @bind-Value="model.DBMode" Label="DB Mode" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" TextChanged="OnSelDBModeChanged">
                                    <MudSelectItem Value="@("SQLServer")" />
                                    <MudSelectItem Value="@("SQLite")" />
                                    <MudSelectItem Value="@("MySQL")" />
                                    <MudSelectItem Value="@("PostgreSQL")" />
                                </MudSelect>
                                <MudTextField @bind-Value="model.QryStr" T="string" Label="Query" HelperText="Write the query string here" Lines="1" MaxLines="10" Placeholder="@qrystrpholder" For="@(() => model.QryStr)" AutoGrow />
                            </MudCardContent>
                            <MudCardActions Class="d-block text-center mt-3 mb-3">
                                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" Class="ml-auto" OnClick="DoClearData">Reset</MudButton>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Send</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </EditForm>

            @if(!string.IsNullOrEmpty(responseBody)) 
            {
                <div class="qryrunres mt-3" id="qryrunres">
                    <pre class="code">
                        <span class="codetitle">
                            <MudIcon Icon="@Icons.Material.Filled.QueryStats" Color="Color.Inherit" class="codeicon" />
                            <span class="codetext">
                                Query Runner Results
                            </span>
                        </span>
                        <div class="coderesp">
                            @responseBody
                        </div>
                    </pre>
                </div>
            }
        </div>
    </div>
</div>

@code {
    lcpCl.Admin.QryRunner model { get; set; } = new lcpCl.Admin.QryRunner();
    HttpResponseMessage? DataX { get; set; }
    string? responseBody { get; set; }
    string? qrystrpholder { get; set; }
    bool success;
    private LCPCollection.Shared.Classes.Users? usersDataInfo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        qrystrpholder = GetQryStrPlaceHolder(model.DBMode);
        usersDataInfo = await localStorage.GetItemAsync<LCPCollection.Shared.Classes.Users>("loginInfo");
        StateHasChanged();

        // return base.OnInitializedAsync();
    }

    private async Task OnValidSubmit(EditContext context)
    {
        success = true;

        if(success) {
            await DoSubData();
        }

        StateHasChanged();
    }

    private void DoClearData() {
        @* model.DBMode = "SQLServer"; *@
        model.QryStr = "";
        responseBody = "";
        StateHasChanged();
    }

    private async Task DoSubData()
    {
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", usersDataInfo!.CurrentToken);
        DataX = await httpClient.PostAsJsonAsync<lcpCl.Admin.QryRunner>("admin/qryrunner", model);
        responseBody = await DataX.Content.ReadAsStringAsync();
        qrystrpholder = GetQryStrPlaceHolder(model.DBMode);
    }

    private void OnSelDBModeChanged() {
        qrystrpholder = GetQryStrPlaceHolder(model.DBMode);
    }

    private string GetQryStrPlaceHolder(string dbm) {
        return dbm.Contains("PostgreSQL", StringComparison.InvariantCultureIgnoreCase) ? $"select * from public."+'"'+"Animes"+'"' : "select * from animes";
    }
}